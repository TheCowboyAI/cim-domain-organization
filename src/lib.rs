//! Organization Domain
//!
//! This domain handles organizational structures, hierarchies, and relationships.

pub mod organization;

// Re-export everything from organization module
pub use organization::*;

// Import necessary types from cim-core-domain
use cim_domain::{
    EntityId, Command, DomainEvent, Query,
};

use serde::{Deserialize, Serialize};
use uuid::Uuid;

// Organization Commands

/// Create a new organization
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CreateOrganization {
    /// Organization's unique ID (generated by caller)
    pub organization_id: Uuid,
    /// Name of the organization
    pub name: String,
    /// Type of organization
    pub org_type: OrganizationType,
    /// Parent organization ID (if this is a sub-organization)
    pub parent_id: Option<Uuid>,
    /// Primary location ID
    pub primary_location_id: Option<Uuid>,
}

impl Command for CreateOrganization {
    type Aggregate = Organization;

    fn aggregate_id(&self) -> Option<EntityId<Self::Aggregate>> {
        Some(EntityId::from_uuid(self.organization_id))
    }
}

/// Add a member to an organization
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AddOrganizationMember {
    /// Organization ID
    pub organization_id: Uuid,
    /// Person ID to add as member
    pub person_id: Uuid,
    /// Role to assign
    pub role: OrganizationRole,
    /// Who this person reports to (if applicable)
    pub reports_to: Option<Uuid>,
}

impl Command for AddOrganizationMember {
    type Aggregate = Organization;

    fn aggregate_id(&self) -> Option<EntityId<Self::Aggregate>> {
        Some(EntityId::from_uuid(self.organization_id))
    }
}

// Organization Events

/// Organization was created
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrganizationCreated {
    /// The unique identifier of the organization
    pub organization_id: Uuid,
    /// The name of the organization
    pub name: String,
    /// The type of organization (e.g., Company, Department, Team)
    pub org_type: OrganizationType,
    /// The parent organization ID if this is a sub-organization
    pub parent_id: Option<Uuid>,
    /// The primary location ID for this organization
    pub primary_location_id: Option<Uuid>,
    /// When the organization was created
    pub created_at: chrono::DateTime<chrono::Utc>,
}

impl DomainEvent for OrganizationCreated {
    fn aggregate_id(&self) -> Uuid {
        self.organization_id
    }

    fn event_type(&self) -> &'static str {
        "OrganizationCreated"
    }

    fn subject(&self) -> String {
        format!("organizations.organization.created.v1")
    }
}

/// Member was added to organization
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrganizationMemberAdded {
    /// The organization receiving the new member
    pub organization_id: Uuid,
    /// The person being added as a member
    pub person_id: Uuid,
    /// The role assigned to the member in this organization
    pub role: OrganizationRole,
    /// The ID of the person this member reports to (if applicable)
    pub reports_to: Option<Uuid>,
    /// When the member joined the organization
    pub joined_at: chrono::DateTime<chrono::Utc>,
}

impl DomainEvent for OrganizationMemberAdded {
    fn aggregate_id(&self) -> Uuid {
        self.organization_id
    }

    fn event_type(&self) -> &'static str {
        "OrganizationMemberAdded"
    }

    fn subject(&self) -> String {
        format!("organizations.organization.member_added.v1")
    }
}

// Organization Queries

/// Query to get organization hierarchy
#[derive(Debug, Clone)]
pub struct GetOrganizationHierarchy {
    /// The root organization ID to start from
    pub organization_id: Uuid,
    /// Maximum depth to traverse (None = unlimited)
    pub max_depth: Option<usize>,
}

impl Query for GetOrganizationHierarchy {}

/// Organization view for queries
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrganizationView {
    /// Organization's unique identifier
    pub organization_id: Uuid,
    /// Name of the organization
    pub name: String,
    /// Type of organization
    pub org_type: OrganizationType,
    /// Status of the organization
    pub status: OrganizationStatus,
    /// Parent organization ID
    pub parent_id: Option<Uuid>,
    /// Child organization IDs
    pub child_units: Vec<Uuid>,
    /// Member count
    pub member_count: usize,
    /// Primary location name
    pub primary_location_name: Option<String>,
}

/// Hierarchical organization view
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrganizationHierarchyView {
    /// The organization at this level
    pub organization: OrganizationView,
    /// Child organizations
    pub children: Vec<OrganizationHierarchyView>,
}

// Add more organization-related events as needed...

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_organization_creation() {
        let org = Organization::new(
            "Acme Corp".to_string(),
            OrganizationType::Company,
        );

        assert_eq!(org.name, "Acme Corp");
        assert_eq!(org.org_type, OrganizationType::Company);
        assert_eq!(org.status, OrganizationStatus::Active);
    }

    #[test]
    fn test_add_member() {
        let mut org = Organization::new(
            "Tech Team".to_string(),
            OrganizationType::Team,
        );

        let person_id = Uuid::new_v4();
        let role = OrganizationRole {
            role_id: "member".to_string(),
            title: "Team Member".to_string(),
            level: RoleLevel::Mid,
            permissions: std::collections::HashSet::new(),
            attributes: std::collections::HashMap::new(),
        };

        assert!(org.add_member(person_id, role).is_ok());
        assert_eq!(org.members().len(), 1);
    }
}
