//! Commands for the Organization domain

use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::value_objects::{
    OrganizationType, OrganizationStatus, OrganizationRole,
};
use crate::events::MemberDisposition;

/// Create a new organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct CreateOrganization {
    /// Organization's unique ID (generated by caller)
    pub organization_id: Uuid,
    /// Name of the organization
    pub name: String,
    /// Type of organization
    pub org_type: OrganizationType,
    /// Parent organization ID (if this is a sub-organization)
    pub parent_id: Option<Uuid>,
    /// Primary location ID
    pub primary_location_id: Option<Uuid>,
}

/// Update organization details
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct UpdateOrganization {
    /// Organization to update
    pub organization_id: Uuid,
    /// New name if changing
    pub name: Option<String>,
    /// New primary location if changing
    pub primary_location_id: Option<Uuid>,
}

/// Change organization status
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ChangeOrganizationStatus {
    /// Organization to update
    pub organization_id: Uuid,
    /// New status
    pub new_status: OrganizationStatus,
    /// Reason for status change
    pub reason: Option<String>,
}

/// Add a member to an organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AddMember {
    /// Organization ID
    pub organization_id: Uuid,
    /// Person ID to add as member
    pub person_id: Uuid,
    /// Role to assign
    pub role: OrganizationRole,
    /// Who this person reports to (if applicable)
    pub reports_to: Option<Uuid>,
}

/// Remove a member from an organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct RemoveMember {
    /// Organization ID
    pub organization_id: Uuid,
    /// Person ID to remove
    pub person_id: Uuid,
    /// Reason for removal
    pub reason: Option<String>,
}

/// Update a member's role
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct UpdateMemberRole {
    /// Organization ID
    pub organization_id: Uuid,
    /// Person whose role to update
    pub person_id: Uuid,
    /// New role
    pub new_role: OrganizationRole,
}

/// Change reporting relationship
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ChangeReportingRelationship {
    /// Organization ID
    pub organization_id: Uuid,
    /// Person whose manager to change
    pub person_id: Uuid,
    /// New manager (None to remove manager)
    pub new_manager_id: Option<Uuid>,
}

/// Add a child organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AddChildOrganization {
    /// Parent organization ID
    pub parent_id: Uuid,
    /// Child organization ID
    pub child_id: Uuid,
}

/// Remove a child organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct RemoveChildOrganization {
    /// Parent organization ID
    pub parent_id: Uuid,
    /// Child organization ID
    pub child_id: Uuid,
}

/// Add a location to organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AddLocation {
    /// Organization ID
    pub organization_id: Uuid,
    /// Location ID to add
    pub location_id: Uuid,
    /// Make this the primary location
    pub make_primary: bool,
}

/// Remove a location from organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct RemoveLocation {
    /// Organization ID
    pub organization_id: Uuid,
    /// Location ID to remove
    pub location_id: Uuid,
}

/// Change primary location
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ChangePrimaryLocation {
    /// Organization ID
    pub organization_id: Uuid,
    /// New primary location ID
    pub new_location_id: Uuid,
}

/// Dissolve an organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct DissolveOrganization {
    /// Organization to dissolve
    pub organization_id: Uuid,
    /// Reason for dissolution
    pub reason: String,
    /// What happens to members
    pub member_disposition: MemberDisposition,
}

/// Merge two organizations
#[derive(Debug, Clone)]
pub struct MergeOrganizations {
    pub source_organization_id: Uuid,
    pub target_organization_id: Uuid,
    pub member_disposition: crate::events::MemberDisposition,
}

/// Acquire an organization
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AcquireOrganization {
    /// Organization being acquired
    pub acquired_organization_id: Uuid,
    /// Acquiring organization
    pub acquiring_organization_id: Uuid,
    /// Whether acquired org maintains independence
    pub maintains_independence: bool,
}

/// Transfer members between organizations
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct TransferMembers {
    /// Source organization
    pub from_organization_id: Uuid,
    /// Target organization
    pub to_organization_id: Uuid,
    /// Members to transfer
    pub person_ids: Vec<Uuid>,
    /// Whether to preserve roles
    pub preserve_roles: bool,
}

/// Reorganize structure
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ReorganizeStructure {
    /// Organization to reorganize
    pub organization_id: Uuid,
    /// New parent (if changing)
    pub new_parent_id: Option<Uuid>,
    /// Children to move to other parents
    pub child_moves: Vec<ChildMove>,
}

/// Move a child to a new parent
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct ChildMove {
    /// Child organization
    pub child_id: Uuid,
    /// New parent organization
    pub new_parent_id: Uuid,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_create_organization_command() {
        let cmd = CreateOrganization {
            organization_id: Uuid::new_v4(),
            name: "Test Corp".to_string(),
            org_type: OrganizationType::Company,
            parent_id: None,
            primary_location_id: None,
        };

        assert_eq!(cmd.name, "Test Corp");
        assert_eq!(cmd.org_type, OrganizationType::Company);
        assert!(cmd.parent_id.is_none());
    }

    #[test]
    fn test_add_member_command() {
        let role = OrganizationRole::software_engineer();
        let cmd = AddMember {
            organization_id: Uuid::new_v4(),
            person_id: Uuid::new_v4(),
            role,
            reports_to: Some(Uuid::new_v4()),
        };

        assert!(cmd.reports_to.is_some());
        assert_eq!(cmd.role.title, "Software Engineer");
    }
} 